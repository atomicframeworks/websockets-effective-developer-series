

Differences between http spec - DOES NOT FOLLOW REDIRECTS

http://www.w3.org/TR/websockets/#network-intro

When the user agent validates the server's response during the "establish a WebSocket connection" algorithm, if the status code received from the server is not 101 (e.g. it is a redirect), the user agent must fail the WebSocket connection.

Following HTTP procedures here could introduce serious security problems in a Web browser context. For example, consider a host with a WebSocket server at one path and an open HTTP redirector at another. Suddenly, any script that can be given a particular WebSocket URL can be tricked into communicating to (and potentially sharing secrets with) any host on the Internet, even if the script checks that the URL has the right hostname.









IMAGES THAT SHOW EACH OF THE TYPES OF CONNECTIONS

http://stackoverflow.com/questions/11077857/what-are-long-polling-websockets-server-sent-events-sse-and-comet







Message framing: http://blog.stephencleary.com/2009/04/message-framing.html
Since TCP operates on streams, one must design a “message framing” protocol that will wrap the messages sent back and forth.







Random stuff: 
http://stackoverflow.com/questions/12555043/my-understanding-of-http-polling-long-polling-http-streaming-and-websockets




1.6.  Security Model

   _This section is non-normative._

   The WebSocket Protocol uses the origin model used by web browsers to
   restrict which web pages can contact a WebSocket server when the
   WebSocket Protocol is used from a web page.  Naturally, when the
   WebSocket Protocol is used by a dedicated client directly (i.e., not
   from a web page through a web browser), the origin model is not
   useful, as the client can provide any arbitrary origin string.

   This protocol is intended to fail to establish a connection with
   servers of pre-existing protocols like SMTP [RFC5321] and HTTP, while
   allowing HTTP servers to opt-in to supporting this protocol if



Fette & Melnikov             Standards Track                   [Page 10]
 
RFC 6455                 The WebSocket Protocol            December 2011


   desired.  This is achieved by having a strict and elaborate handshake
   and by limiting the data that can be inserted into the connection
   before the handshake is finished (thus limiting how much the server
   can be influenced).

   It is similarly intended to fail to establish a connection when data
   from other protocols, especially HTTP, is sent to a WebSocket server,
   for example, as might happen if an HTML "form" were submitted to a
   WebSocket server.  This is primarily achieved by requiring that the
   server prove that it read the handshake, which it can only do if the
   handshake contains the appropriate parts, which can only be sent by a
   WebSocket client.  In particular, at the time of writing of this
   specification, fields starting with |Sec-| cannot be set by an
   attacker from a web browser using only HTML and JavaScript APIs such
   as XMLHttpRequest [XMLHttpRequest].






Presentation notes:
https://www.rsaconference.com/writable/presentations/file_upload/asec-f41.pdf





http://blog.kaazing.com/2012/02/28/html5-websocket-security-is-strong/

Links:
  http://stackoverflow.com/questions/12555043/my-understanding-of-http-polling-long-polling-http-streaming-and-websockets
  https://en.wikipedia.org/wiki/Push_technology
  https://www.quora.com/Why-would-HTTP-long-polling-be-used-instead-of-HTTP-Streaming-to-achieve-real-time-push-notifications
  https://www.pubnub.com/blog/websockets-and-long-polling-in-javascript-ruby-and-python/
  https://www.pubnub.com/blog/http-long-polling/
  https://en.wikipedia.org/wiki/Comet_%28programming%29
  https://en.wikipedia.org/wiki/Comet_(programming)
  http://www.ibm.com/developerworks/web/library/wa-reverseajax1/index.html
  
  http://tools.ietf.org/html/rfc6455#section-1.2
  http://www.w3.org/TR/websockets/#network-intro
  https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API
  http://stackoverflow.com/questions/11077857/what-are-long-polling-websockets-server-sent-events-sse-and-comet
  http://blog.stephencleary.com/2009/04/message-framing.html
  https://www.youtube.com/watch?v=z-CYO1ABCp4